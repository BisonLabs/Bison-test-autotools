const { ethers } = require("ethers");

//const provider = new ethers.JsonRpcProvider("http://private-testnet.blifeprotocol.com:12345")
const provider = new ethers.JsonRpcProvider("https://private-testnet.blifeprotocol.com:25600")
const privateKey = '0x90cb5be9e2c125d84af44f19a4e6e36af359bd47b41577aedbe8aa24313bbd40'
const num = 10
const value = BigInt(200e18)
const wallet = new ethers.Wallet(privateKey, provider)
const pk_list = [];   
const address_list = [];
const value_list = [];
const erc_value_list = [];
var erc20_address;

const airdrop_abi = [
	{
		"inputs": [
			{
				"internalType": "uint256[]",
				"name": "_arr",
				"type": "uint256[]"
			}
		],
		"name": "getSum",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "sum",
				"type": "uint256"
			}
		],
		"stateMutability": "pure",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_token",
				"type": "address"
			},
			{
				"internalType": "address payable[]",
				"name": "_addresses",
				"type": "address[]"
			},
			{
				"internalType": "uint256[]",
				"name": "_amounts",
				"type": "uint256[]"
			}
		],
		"name": "multiTransferERC20",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address payable[]",
				"name": "_addresses",
				"type": "address[]"
			},
			{
				"internalType": "uint256[]",
				"name": "_amounts",
				"type": "uint256[]"
			}
		],
		"name": "multiTransferETH",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	}
]

const airdrop_bytecode = "6080604052348015600e575f80fd5b50610c318061001c5f395ff3fe608060405260043610610033575f3560e01c806377988cf814610037578063ccb8c1e014610053578063daa8ce9a1461008f575b5f80fd5b610051600480360381019061004c919061055d565b6100ab565b005b34801561005e575f80fd5b50610079600480360381019061007491906105db565b61024d565b604051610086919061063e565b60405180910390f35b6100a960048036038101906100a491906106b1565b610299565b005b8181905084849050146100f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ea906107c2565b60405180910390fd5b5f6100fe838361024d565b9050803414610142576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101399061082a565b60405180910390fd5b5f5b85859050811015610245575f86868381811061016357610162610848565b5b905060200201602081019061017891906108b0565b73ffffffffffffffffffffffffffffffffffffffff168585848181106101a1576101a0610848565b5b905060200201356040516101b490610908565b5f6040518083038185875af1925050503d805f81146101ee576040519150601f19603f3d011682016040523d82523d5f602084013e6101f3565b606091505b5050905080610237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022e90610966565b60405180910390fd5b508080600101915050610144565b505050505050565b5f805f90505b838390508110156102925783838281811061027157610270610848565b5b905060200201358261028391906109b1565b91508080600101915050610253565b5092915050565b8181905084849050146102e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d8906107c2565b60405180910390fd5b5f8590505f6102f0848461024d565b9050808273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161032e9291906109f3565b602060405180830381865afa158015610349573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036d9190610a44565b10156103ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a590610ab9565b60405180910390fd5b5f5b868690508160ff161015610495578273ffffffffffffffffffffffffffffffffffffffff166323b872dd3389898560ff168181106103f1576103f0610848565b5b905060200201602081019061040691906108b0565b88888660ff1681811061041c5761041b610848565b5b905060200201356040518463ffffffff1660e01b815260040161044193929190610b32565b6020604051808303815f875af115801561045d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104819190610b9c565b50808061048d90610bd3565b9150506103b0565b5050505050505050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126104c8576104c76104a7565b5b8235905067ffffffffffffffff8111156104e5576104e46104ab565b5b602083019150836020820283011115610501576105006104af565b5b9250929050565b5f8083601f84011261051d5761051c6104a7565b5b8235905067ffffffffffffffff81111561053a576105396104ab565b5b602083019150836020820283011115610556576105556104af565b5b9250929050565b5f805f80604085870312156105755761057461049f565b5b5f85013567ffffffffffffffff811115610592576105916104a3565b5b61059e878288016104b3565b9450945050602085013567ffffffffffffffff8111156105c1576105c06104a3565b5b6105cd87828801610508565b925092505092959194509250565b5f80602083850312156105f1576105f061049f565b5b5f83013567ffffffffffffffff81111561060e5761060d6104a3565b5b61061a85828601610508565b92509250509250929050565b5f819050919050565b61063881610626565b82525050565b5f6020820190506106515f83018461062f565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61068082610657565b9050919050565b61069081610676565b811461069a575f80fd5b50565b5f813590506106ab81610687565b92915050565b5f805f805f606086880312156106ca576106c961049f565b5b5f6106d78882890161069d565b955050602086013567ffffffffffffffff8111156106f8576106f76104a3565b5b610704888289016104b3565b9450945050604086013567ffffffffffffffff811115610727576107266104a3565b5b61073388828901610508565b92509250509295509295909350565b5f82825260208201905092915050565b7f4c656e67746873206f662041646472657373657320616e6420416d6f756e74735f8201527f204e4f5420455155414c00000000000000000000000000000000000000000000602082015250565b5f6107ac602a83610742565b91506107b782610752565b604082019050919050565b5f6020820190508181035f8301526107d9816107a0565b9050919050565b7f5472616e7366657220616d6f756e74206572726f7200000000000000000000005f82015250565b5f610814601583610742565b915061081f826107e0565b602082019050919050565b5f6020820190508181035f83015261084181610808565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f61087f82610657565b9050919050565b61088f81610875565b8114610899575f80fd5b50565b5f813590506108aa81610886565b92915050565b5f602082840312156108c5576108c461049f565b5b5f6108d28482850161089c565b91505092915050565b5f81905092915050565b50565b5f6108f35f836108db565b91506108fe826108e5565b5f82019050919050565b5f610912826108e8565b9150819050919050565b7f7472616e73666572206661696c000000000000000000000000000000000000005f82015250565b5f610950600d83610742565b915061095b8261091c565b602082019050919050565b5f6020820190508181035f83015261097d81610944565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6109bb82610626565b91506109c683610626565b92508282019050808211156109de576109dd610984565b5b92915050565b6109ed81610676565b82525050565b5f604082019050610a065f8301856109e4565b610a1360208301846109e4565b9392505050565b610a2381610626565b8114610a2d575f80fd5b50565b5f81519050610a3e81610a1a565b92915050565b5f60208284031215610a5957610a5861049f565b5b5f610a6684828501610a30565b91505092915050565b7f4e65656420417070726f766520455243323020746f6b656e00000000000000005f82015250565b5f610aa3601883610742565b9150610aae82610a6f565b602082019050919050565b5f6020820190508181035f830152610ad081610a97565b9050919050565b5f819050919050565b5f610afa610af5610af084610657565b610ad7565b610657565b9050919050565b5f610b0b82610ae0565b9050919050565b5f610b1c82610b01565b9050919050565b610b2c81610b12565b82525050565b5f606082019050610b455f8301866109e4565b610b526020830185610b23565b610b5f604083018461062f565b949350505050565b5f8115159050919050565b610b7b81610b67565b8114610b85575f80fd5b50565b5f81519050610b9681610b72565b92915050565b5f60208284031215610bb157610bb061049f565b5b5f610bbe84828501610b88565b91505092915050565b5f60ff82169050919050565b5f610bdd82610bc7565b915060ff8203610bf057610bef610984565b5b60018201905091905056fea26469706673582212203e7631969350e6a8676497d16e6ab113168058356ad7e07bb9addf8ff1a89d1264736f6c634300081a0033"

const erc20_abi = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "burn",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"internalType": "uint8",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "mint",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

const erc20_bytecode = ""
const main = async () => {
    console.log("1 Deploying ERC20 Contract");
    // Deploy the ERC20 contract
    const erc20_factory = new ethers.ContractFactory(erc20_abi, erc20_bytecode, wallet);
    const erc20_contract = await erc20_factory.deploy({gasLimit: 21000000});
    erc20_address = erc20_contract.target;
    console.log(`ERC20 Contract Address: ${erc20_address}`);
    await erc20_contract.waitForDeployment();
    console.log("ERC20 Contract Deployed");

    console.log("2 Deploying Airdrop Contract");
    // Deploy the Airdrop contract
    const airdrop_factory = new ethers.ContractFactory(airdrop_abi, airdrop_bytecode, wallet);
    const airdrop_contract = await airdrop_factory.deploy({gasLimit: 21000000});
    const airdrop_address = airdrop_contract.target;
    console.log(`Airdrop Contract Address: ${airdrop_address}`);
    await airdrop_contract.waitForDeployment();
    console.log("Airdrop Contract Deployed");

    console.log("3 Interacting with ERC20 Contract: Minting Funds");
    // Mint funds in the ERC20 contract
    const mint_tx = await erc20_contract.mint(value);
    await mint_tx.wait();
    console.log(`Transaction Details:`);
    console.log(mint_tx);

    console.log("4 Interacting with ERC20 Contract: Approving Airdrop Contract for Funds");
    // Approve the Airdrop contract to spend funds
    const approve_tx = await erc20_contract.approve(airdrop_address, value);
    await approve_tx.wait();
    console.log(`Transaction Details:`);
    console.log(approve_tx);

    console.log(`5 Creating ${num} Random Wallets`);

    if (num > 500) {
        let i = 0;
        const address_list1 = [];
        const address_list2 = [];
        let value1 = BigInt(0);
        let value2 = BigInt(0);
        const value_list1 = [];
        const value_list2 = [];
        const erc_value_list1 = [];
        const erc_value_list2 = [];
        while (i < num) {
            const wallet = ethers.Wallet.createRandom();
            const address = await wallet.getAddress();
            if (i % 2 === 0) {
                address_list1.push(address);
                value_list1.push(BigInt(1e18));
                erc_value_list1.push(BigInt(10000));
                value1 += BigInt(1e18);
            } else {
                address_list2.push(address);
                value_list2.push(BigInt(1e18));
                value2 += BigInt(1e18);
                erc_value_list2.push(BigInt(10000));
            }
            const pk = wallet.privateKey;
            pk_list.push(pk);
            i++;
        }
        console.log("\n6 Interacting with Contracts");
        // Perform multiple ETH transfers
        const tx1 = await airdrop_contract.multiTransferETH(address_list1, value_list1, {value: value1});
        console.log(`Transaction Details:`);
        await tx1.wait();
        console.log(tx1);

        const tx2 = await airdrop_contract.multiTransferETH(address_list2, value_list2, {value: value2});
        console.log(`Transaction Details:`);
        await tx2.wait();
        console.log(tx2);

        // Perform multiple ERC20 transfers
        const tx3 = await airdrop_contract.multiTransferERC20(erc20_address, address_list1, erc_value_list1);
        console.log(`Transaction Details:`);
        await tx3.wait();
        console.log(tx3);

        const tx4 = await airdrop_contract.multiTransferERC20(erc20_address, address_list2, erc_value_list2);
        console.log(`Transaction Details:`);
        await tx4.wait();
        console.log(tx4);

    } else {
        let i = 0;
        while (i < num) {
            const wallet = ethers.Wallet.createRandom();
            const address = await wallet.getAddress();
            address_list.push(address);
            const pk = wallet.privateKey;
            pk_list.push(pk);
            value_list.push(BigInt(1e18));
            erc_value_list.push(BigInt(100));
            i++;
        }
        console.log("\n6 Interacting with Airdrop Contract");
        // Perform a single batch of ETH transfers
        const tx = await airdrop_contract.multiTransferETH(address_list, value_list, {value: value});
        console.log(`Transaction Details:`);
        await tx.wait();
        console.log(tx);
        // Perform a single batch of ERC20 transfers
        const erc_tx = await airdrop_contract.multiTransferERC20(erc20_address, address_list, erc_value_list);
        console.log(`Transaction Details:`);
        await erc_tx.wait();
        console.log(erc_tx);
    }

    multi_transfer();
}

main();

function multi_transfer() {
    for (let i in pk_list) {
        t1(pk_list[i]);
    }
}

const t1 = async (pk) => {
    let i = 0;
    while (i < 100) {
        const wallet1 = new ethers.Wallet(pk, provider);
        const address1 = wallet1.address;
        console.log(`\nFROM Address: ${address1}`);
        const wallet2 = ethers.Wallet.createRandom();
        const address2 = wallet2.address;
        console.log(`TO Address: ${address2}`);

        const erc20_ct = new ethers.Contract(erc20_address, erc20_abi, wallet1);
        const balance1 = await erc20_ct.balanceOf(address1);
        console.log(`\tBefore Transfer Balance: ${balance1}`);

        // Transfer 1 token
        const transfer_tx = await erc20_ct.transfer(address2, 1);
        console.log(`\nWaiting for Transfer (may take a few minutes)`);
        await transfer_tx.wait();
        console.log(`\nTransfer Successful!`);

        const balance = await erc20_ct.balanceOf(address1);
        console.log(`\tAfter Transfer Balance: ${balance}`);
    }
}
